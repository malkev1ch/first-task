version: "3.8"

services:
  postgresdb:
    image: postgres:14-alpine
    container_name: first-task-database
    ports:
      - "5436:5432"
    env_file:
      - env/postgres.env
    restart: always
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - application

  redis:
    image: redis:7.0-rc2
    container_name: first-task-redis
    ports:
    - "6381:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - application

#  mongodb:
#    image: mongo:5.0
#    container_name: first-task-mongo
#    ports:
#      - "27018:27017"
#    env_file:
#      - env/mongo.env
#    volumes:
#      - "./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro"
#      - dbdata:/data/db
#    healthcheck:
#      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
#      interval: 10s
#      timeout: 10s
#      retries: 5
#      start_period: 40s
#    networks:
#      - application

  golang:
    build: .
    container_name: first-task
    ports:
      - "8080:8080"
    env_file:
      - env/golang.env
    volumes:
      - "/home/andreimalkevich/first-task/Data/:/Data/"
    depends_on:
      postgresdb:
        condition: service_healthy
      redis:
        condition: service_healthy
#      mongodb:
#        condition: service_healthy
    networks:
      - application


networks:
  application:
    driver: bridge

volumes:
  database:
  dbdata: