// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/malkev1ch/first-task/internal/model"
	repository "github.com/malkev1ch/first-task/internal/repository"
)

// MockCat is a mock of Cat interface.
type MockCat struct {
	ctrl     *gomock.Controller
	recorder *MockCatMockRecorder
}

// MockCatMockRecorder is the mock recorder for MockCat.
type MockCatMockRecorder struct {
	mock *MockCat
}

// NewMockCat creates a new mock instance.
func NewMockCat(ctrl *gomock.Controller) *MockCat {
	mock := &MockCat{ctrl: ctrl}
	mock.recorder = &MockCatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCat) EXPECT() *MockCatMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCat) Create(ctx context.Context, cat *model.Cat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCatMockRecorder) Create(ctx, cat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCat)(nil).Create), ctx, cat)
}

// Delete mocks base method.
func (m *MockCat) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCatMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCat)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCat) Get(ctx context.Context, id string) (*model.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCatMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCat)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockCat) Update(ctx context.Context, id string, input *model.UpdateCat) (*model.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, input)
	ret0, _ := ret[0].(*model.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCatMockRecorder) Update(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCat)(nil).Update), ctx, id, input)
}

// UploadImage mocks base method.
func (m *MockCat) UploadImage(ctx context.Context, id, path string) (*model.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, id, path)
	ret0, _ := ret[0].(*model.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockCatMockRecorder) UploadImage(ctx, id, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockCat)(nil).UploadImage), ctx, id, path)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(ctx context.Context, input *repository.CreateUserInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), ctx, input)
}

// GetUserHashedPassword mocks base method.
func (m *MockAuth) GetUserHashedPassword(ctx context.Context, email string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHashedPassword", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserHashedPassword indicates an expected call of GetUserHashedPassword.
func (mr *MockAuthMockRecorder) GetUserHashedPassword(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHashedPassword", reflect.TypeOf((*MockAuth)(nil).GetUserHashedPassword), ctx, email)
}

// GetUserRefreshToken mocks base method.
func (m *MockAuth) GetUserRefreshToken(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRefreshToken", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRefreshToken indicates an expected call of GetUserRefreshToken.
func (mr *MockAuthMockRecorder) GetUserRefreshToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRefreshToken", reflect.TypeOf((*MockAuth)(nil).GetUserRefreshToken), ctx, id)
}

// UpdateUserRefreshToken mocks base method.
func (m *MockAuth) UpdateUserRefreshToken(ctx context.Context, refreshToken, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRefreshToken", ctx, refreshToken, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRefreshToken indicates an expected call of UpdateUserRefreshToken.
func (mr *MockAuthMockRecorder) UpdateUserRefreshToken(ctx, refreshToken, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRefreshToken", reflect.TypeOf((*MockAuth)(nil).UpdateUserRefreshToken), ctx, refreshToken, id)
}
